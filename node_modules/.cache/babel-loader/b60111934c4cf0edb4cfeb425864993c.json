{"ast":null,"code":"var _jsxFileName = \"/Users/konchan/Desktop/reactTest/my-app/src/components/events_new.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // https://redux-form.com/7.3.0/docs/api/field.md/\n// https://redux-form.com/7.3.0/docs/api/reduxform.md/\n\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport RaisedButton from 'material-ui/RaisedButton'; // https://v0.material-ui.com/v0.20.0/#/components/text-field\n\nimport TextField from 'material-ui/TextField';\nimport { postEvent } from '../actions';\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props); // 本classに従属するメソッドにpropsを紐付ける(当該メソッドでpropsを利用する)ために\n    // constructorで当該メソッドをbindしています。\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const input = field.input,\n          label = field.label,\n          type = field.type,\n          _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n    return React.createElement(TextField, Object.assign({\n      hintText: label,\n      floatingLabelText: label,\n      type: type,\n      errorText: touched && error\n    }, input, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push('/');\n  }\n\n  render() {\n    const _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine,\n          submitting = _this$props.submitting,\n          invalid = _this$props.invalid;\n    const style = {\n      margin: 12\n    };\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Title\",\n      name: \"title\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Body\",\n      name: \"body\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), React.createElement(RaisedButton, {\n      label: \"Submit\",\n      type: \"submit\",\n      style: style,\n      disabled: pristine || submitting || invalid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(RaisedButton, {\n      label: \"Cancel\",\n      style: style,\n      containerElement: React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {}; // タイトルが無かったらエラー\n\n  if (!values.title) errors.title = \"Enter a title, please.\"; // ボディーが無かったらエラー\n\n  if (!values.body) errors.body = \"Enter a body, please.\";\n  return errors;\n};\n\nconst mapDispatchToProps = {\n  postEvent\n}; // コンポーネントをreduxFormでwrapする(decorateするとも言ったりします)ことで\n// コンポーネントのpropsが拡張され、pristine、submitting、invalid等の属性が追加されます。\n\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  validate,\n  form: 'eventNewForm'\n})(EventsNew));","map":{"version":3,"sources":["/Users/konchan/Desktop/reactTest/my-app/src/components/events_new.js"],"names":["React","Component","connect","Field","reduxForm","Link","RaisedButton","TextField","postEvent","EventsNew","constructor","props","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","render","handleSubmit","pristine","submitting","invalid","style","margin","validate","errors","title","body","mapDispatchToProps","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n// https://redux-form.com/7.3.0/docs/api/field.md/\n// https://redux-form.com/7.3.0/docs/api/reduxform.md/\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport RaisedButton from 'material-ui/RaisedButton'\n// https://v0.material-ui.com/v0.20.0/#/components/text-field\nimport TextField from 'material-ui/TextField'\n\nimport { postEvent } from '../actions'\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props)\n\n    // 本classに従属するメソッドにpropsを紐付ける(当該メソッドでpropsを利用する)ために\n    // constructorで当該メソッドをbindしています。\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  renderField(field) {\n    const { input, label, type, meta: { touched, error } } = field\n\n    return (\n      <TextField\n        hintText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    )\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values)\n    this.props.history.push('/')\n  }\n\n  render() {\n    const { handleSubmit, pristine, submitting, invalid } = this.props\n    const style = { margin: 12 }\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div><Field label=\"Title\" name=\"title\" type=\"text\" component={this.renderField} /></div>\n        <div><Field label=\"Body\" name=\"body\" type=\"text\" component={this.renderField} /></div>\n\n        {/* 以下のいずれかに該当する場合はSubmitボタンが非活性状態となります。 */}\n        {/* - 初期値と同じ場合 */}\n        {/* - 送信中の場合 */}\n        {/* - バリデーションエラーが有る場合 */}\n        <RaisedButton label=\"Submit\" type=\"submit\" style={style} disabled={pristine || submitting || invalid} />\n        <RaisedButton label=\"Cancel\" style={style} containerElement={<Link to=\"/\" />}/>\n      </form>\n    )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n\n  // タイトルが無かったらエラー\n  if (!values.title) errors.title = \"Enter a title, please.\"\n\n  // ボディーが無かったらエラー\n  if (!values.body) errors.body = \"Enter a body, please.\"\n\n  return errors\n}\n\nconst mapDispatchToProps = { postEvent }\n\n// コンポーネントをreduxFormでwrapする(decorateするとも言ったりします)ことで\n// コンポーネントのpropsが拡張され、pristine、submitting、invalid等の属性が追加されます。\nexport default connect(null, mapDispatchToProps)(\n  reduxForm({ validate, form: 'eventNewForm' })(EventsNew)\n)\n"]},"metadata":{},"sourceType":"module"}