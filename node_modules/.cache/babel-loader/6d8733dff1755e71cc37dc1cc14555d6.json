{"ast":null,"code":"var _jsxFileName = \"/Users/konchan/Desktop/reactTest/my-app/src/components/events_index.js\";\nimport React, { Component } from 'react'; // https://react-redux.js.org/5.x/api/connect\n\nimport { connect } from 'react-redux'; // https://lodash.com/docs/4.17.11#map\n\nimport _ from 'lodash'; // https://github.com/ReactTraining/react-router/blob/v4.2.2/packages/react-router-dom/docs/api/Link.md\n\nimport { Link } from 'react-router-dom';\nimport { Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn } from 'material-ui/Table';\nimport FloatingActionButton from 'material-ui/FloatingActionButton';\nimport ContentAdd from 'material-ui/svg-icons/content/add';\nimport { readEvents } from '../actions';\n\nclass EventsIndex extends Component {\n  componentDidMount() {\n    // https://reactjs.org/docs/react-component.html#componentdidmount\n    // 以下のrenderメソッドが実行された後にこのcomponentDidMountメソッドは実行されます。\n    // 尚、公式ドキュメントに「You may call setState() immediately in componentDidMount().」と書かれているように、\n    // 本メソッドの中で状態を変更することが許されています。\n    // 状態が変わった場合は適宜その状態に紐づくDOMの再描画が行われることになります。\n    // 本アプリケーションの場合は、イベント一覧の取得はテーブル描画後に行っています。\n    // そのため、最初に空のイベントテーブルを描画し、イベント一覧が取得できたら\n    // イベントの内容をテーブル上に表示するという流れでレンダリングしています。\n    this.props.readEvents();\n  }\n\n  renderEvents() {\n    // lodashのmapメソッドを使用して、collection(配列)の全要素を1つずつ取り出し\n    // テーブルの行を配列として取得します。\n    // keyにはユニークな値をアサインするためにeventのidを設定しています。\n    // また、タイトルをクリックしたら該当のeventの詳細画面に遷移するようにLinkを設定しています。\n    return _.map(this.props.events, event => React.createElement(TableRow, {\n      key: event.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(TableRowColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, event.id), React.createElement(TableRowColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/events/\".concat(event.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, event.title)), React.createElement(TableRowColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, event.body)));\n  }\n\n  render() {\n    const style = {\n      position: \"fixed\",\n      right: 12,\n      bottom: 12\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(FloatingActionButton, {\n      style: style,\n      containerElement: React.createElement(Link, {\n        to: \"/events/new\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(ContentAdd, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(TableHeader, {\n      displaySelectAll: false,\n      adjustForCheckbox: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(TableHeaderColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"ID\"), React.createElement(TableHeaderColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Title\"), React.createElement(TableHeaderColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Body\"))), React.createElement(TableBody, {\n      displayRowCheckbox: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.renderEvents())));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  events: state.events\n});\n\nconst mapDispatchToProps = {\n  readEvents\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsIndex);","map":{"version":3,"sources":["/Users/konchan/Desktop/reactTest/my-app/src/components/events_index.js"],"names":["React","Component","connect","_","Link","Table","TableBody","TableHeader","TableHeaderColumn","TableRow","TableRowColumn","FloatingActionButton","ContentAdd","readEvents","EventsIndex","componentDidMount","props","renderEvents","map","events","event","id","title","body","render","style","position","right","bottom","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// https://react-redux.js.org/5.x/api/connect\nimport { connect } from 'react-redux'\n// https://lodash.com/docs/4.17.11#map\nimport _ from 'lodash'\n// https://github.com/ReactTraining/react-router/blob/v4.2.2/packages/react-router-dom/docs/api/Link.md\nimport { Link } from 'react-router-dom'\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableHeaderColumn,\n  TableRow,\n  TableRowColumn\n} from 'material-ui/Table'\nimport FloatingActionButton from 'material-ui/FloatingActionButton'\nimport ContentAdd from 'material-ui/svg-icons/content/add'\n\nimport { readEvents } from '../actions'\n\nclass EventsIndex extends Component {\n  componentDidMount() {\n    // https://reactjs.org/docs/react-component.html#componentdidmount\n    // 以下のrenderメソッドが実行された後にこのcomponentDidMountメソッドは実行されます。\n    // 尚、公式ドキュメントに「You may call setState() immediately in componentDidMount().」と書かれているように、\n    // 本メソッドの中で状態を変更することが許されています。\n    // 状態が変わった場合は適宜その状態に紐づくDOMの再描画が行われることになります。\n    // 本アプリケーションの場合は、イベント一覧の取得はテーブル描画後に行っています。\n    // そのため、最初に空のイベントテーブルを描画し、イベント一覧が取得できたら\n    // イベントの内容をテーブル上に表示するという流れでレンダリングしています。\n    this.props.readEvents()\n  }\n\n  renderEvents() {\n    // lodashのmapメソッドを使用して、collection(配列)の全要素を1つずつ取り出し\n    // テーブルの行を配列として取得します。\n    // keyにはユニークな値をアサインするためにeventのidを設定しています。\n    // また、タイトルをクリックしたら該当のeventの詳細画面に遷移するようにLinkを設定しています。\n    return _.map(this.props.events, event => (\n      <TableRow key={event.id}>\n        <TableRowColumn>{event.id}</TableRowColumn>\n        <TableRowColumn>\n          <Link to={`/events/${event.id}`}>\n            {event.title}\n          </Link>\n        </TableRowColumn>\n        <TableRowColumn>{event.body}</TableRowColumn>\n      </TableRow>\n    ))\n  }\n\n  render() {\n    const style = {\n      position: \"fixed\",\n      right: 12,\n      bottom: 12\n    }\n\n    return (\n      <React.Fragment>\n        <FloatingActionButton style={style} containerElement={<Link to=\"/events/new\" />}>\n          <ContentAdd />\n        </FloatingActionButton>\n\n        <Table>\n          <TableHeader\n            displaySelectAll={false}\n            adjustForCheckbox={false}\n          >\n            <TableRow>\n              <TableHeaderColumn>ID</TableHeaderColumn>\n              <TableHeaderColumn>Title</TableHeaderColumn>\n              <TableHeaderColumn>Body</TableHeaderColumn>\n            </TableRow>\n          </TableHeader>\n\n          <TableBody displayRowCheckbox={false}>\n            {this.renderEvents()}\n          </TableBody>\n        </Table>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({ events: state.events })\n\nconst mapDispatchToProps = { readEvents }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsIndex)\n"]},"metadata":{},"sourceType":"module"}